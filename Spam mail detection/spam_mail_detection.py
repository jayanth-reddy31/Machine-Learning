# -*- coding: utf-8 -*-
"""spam mail detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12aOJ8R2ZVKKB62pFv9kjTRFPTty7hja3

Importing dependencies
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#importing data to pandas dataframe
raw_mail_data  = pd.read_csv('/content/mail_data.csv')

raw_mail_data.head()

#repalce the null values with null string
mail_data = raw_mail_data.where(pd.notnull(raw_mail_data),'')

#printing the first 5 rows of the dataframe
mail_data.head()

#printing the number of rows and columns
mail_data.shape

"""Label encoding

Changing the categorical value into numerical value

ham=1

spam=0
"""

mail_data.loc[mail_data['Category']== 'spam','Category']=0
mail_data.loc[mail_data['Category']== 'ham','Category']=1

#seperating the features and target
x=mail_data['Message']
y=mail_data['Category']

print(x,y)

"""splitting the data into training data and test data"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=3)

print(x.shape, x_train.shape, x_test.shape)

"""Feature extraction

converting text data into numerical data
"""

feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)

x_train_features = feature_extraction.fit_transform(x_train)

x_test_features = feature_extraction.transform(x_test)

y_train= y_train.astype('int')
y_test = y_test.astype('int')

print(x_train_features)

"""Training the model

Logistic regression
"""

model = LogisticRegression()

#training model with training data

model.fit(x_train_features, y_train)

"""Evaluating trained model"""

#prediction on training data
x_train_predict = model.predict(x_train_features)
train_accuracy = accuracy_score(x_train_predict, y_train)

print("accuracy on training data : ", train_accuracy)

#prediction on test data
x_test_predict = model.predict(x_test_features)
test_accuracy = accuracy_score(x_test_predict, y_test)
print("Accuracy on test data :", test_accuracy)

"""Building a predictive system"""

input_data=["U dun say so early hor... U c already then say..."]

input_data_features = feature_extraction.transform(input_data)

prediction = model.predict(input_data_features)

print(prediction)

if(prediction[0]==1):
  print("It is a Ham mail")
else:
  print("It is a spam mail")

