# -*- coding: utf-8 -*-
"""Car price prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mY46-NBzOSCzW93QxmV7LN0zDE9dbxOL

Importing the Dependencies
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn import metrics

"""Data collection and processing"""

#Load the dataset into dataframe
car_dataset = pd.read_csv('/content/car data.csv')

#checking the 1st 5 rows of the dataset
car_dataset.head()

#checking the number of rows and column
car_dataset.shape

#getting the infromation of the datset
car_dataset.info()

#checking the number of missing values
car_dataset.isnull().sum()

#checking the distribution of catogarical data
print(car_dataset.Fuel_Type.value_counts())
print(car_dataset.Seller_Type.value_counts())
print(car_dataset.Transmission.value_counts())

"""Encoding the categorical data"""

#encoding fuel_type column
car_dataset.replace({'Fuel_Type':{'Petrol':0,'Diesel':1, "CNG":2}}, inplace = True)
car_dataset.replace({'Seller_Type':{'Dealer':0, 'Individual':1}}, inplace = True)
car_dataset.replace({'Transmission':{'Manual':0, 'Automatic':1}}, inplace = True)

car_dataset.head()

"""Splitting the dataset into data and target"""

x=car_dataset.drop(['Car_Name','Selling_Price'], axis=1)
y=car_dataset['Selling_Price']

"""splitting the data into train and test"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.1, random_state=2)

"""Model training --> Linear regression model"""

#loading the linear regression model
lin_reg=LinearRegression()

#train the model with dataset
lin_reg.fit(x_train, y_train)

"""Model Evaluation"""

#prediction on training data
training_data_prediction = lin_reg.predict(x_train)

# R squared error
error_square = metrics.r2_score(y_train, training_data_prediction)
print("R squared error : ",error_square)

"""vishualizing the actual price and predicted price"""

plt.scatter(y_train, training_data_prediction)
plt.xlabel("Actual price")
plt.ylabel("Predicted price")
plt.title("Actual price vs Predicted price")
plt.show()

#prediction on test dataset
test_data_prediction = lin_reg.predict(x_test)

#calculating r squared error
squared_error = metrics.r2_score(y_test, test_data_prediction)
print("R squared error : ",squared_error)

#visualizing the actual price vs predicted price
plt.scatter(y_test, test_data_prediction)
plt.xlabel("Actual price")
plt.ylabel("predicted price")
plt.title("acutal price vs predicted price")
plt.show()

"""Model training --> Lasso regression"""

#loading the lasso regression model
lass_reg=Lasso()

#traing the model
lass_reg.fit(x_train, y_train)

"""Model evaluation"""

#evaluation on training dataset
training_data_prediction = lass_reg.predict(x_train)

#calculation of r squared error
squared_error = metrics.r2_score(y_train, training_data_prediction)
print("R squared error value : ", squared_error)

#visualizing the actual price and predicted price
plt.scatter(y_train, training_data_prediction)
plt.xlabel("actual price")
plt.ylabel("predicted price")
plt.title("actual price vs predicted price")
plt.show()

#evaluation on test dataset
test_data_prediction = lass_reg.predict(x_test)

#calculation of r squared error
squared_error = metrics.r2_score(y_test, test_data_prediction)
print("R squared error value : ", squared_error)

#visualizing the actual price and predicted price
plt.scatter(y_test, test_data_prediction)
plt.xlabel("actual price")
plt.ylabel("predicted price")
plt.title("actual price vs predicted price")
plt.show()