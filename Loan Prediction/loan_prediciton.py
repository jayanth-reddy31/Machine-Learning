# -*- coding: utf-8 -*-
"""Loan Prediciton.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GVVZQ9kB7kXz40lPanb4xwG7URuU39Hb

Importing the dependencies
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and pre processing"""

#loading the dataset into pandas dataframe
load_dataset=pd.read_csv("/content/train_loan.csv")

print(type(load_dataset))
load_dataset.shape

#printing the sample of dataset
load_dataset.head()

#getting the statistical measures
load_dataset.describe()

#count the number of missing values in each column
load_dataset.isnull().sum()

#dropping the missing values
loan_dataset=load_dataset.dropna()

#label_encoding --> transforming the string values into numerical values
loan_dataset.replace({'Loan_Status':{'N': 0, 'Y': 1}}, inplace=True)

loan_dataset.head()

loan_dataset['Dependents'].value_counts()

#we can not feed 3+ values to the model, so we'll replace 3+ values by 4
loan_dataset= loan_dataset.replace(to_replace='3+', value = 4)

loan_dataset['Dependents'].value_counts()

"""Data Visualization"""

#education and loan status
sns.countplot(x='Education',hue='Loan_Status', data=loan_dataset)

#marital status and loan status
sns.countplot(x='Married', hue='Loan_Status', data=loan_dataset)
sns.countplot(x='Gender', hue='Loan_Status', data=loan_dataset)

#converting categorical values into numerical values
loan_dataset.replace({'Married':{'No':0, 'Yes':1},'Gender':{'Male':1,'Female':0},'Self_Employed':{'Yes':1, 'No':0},
 'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2}, "Education":{'Graduate':1, 'Not Graduate':0}},inplace=True)

loan_dataset.head()

#seperating data and values
x=loan_dataset.drop(columns=['Loan_Status','Loan_ID'],axis=1)
y=loan_dataset['Loan_Status']

print(x)
print(y)

"""Splitting training and test data"""

x_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.1,stratify=y,random_state=2)

print(x.shape, x_train.shape, x_test.shape)

"""Training the model --> SVM model"""

classifier=svm.SVC(kernel='linear')

#training the data
classifier.fit(x_train,y_train)

"""Model evaluation"""

#accuracy score on training dataset
x_train_prediction=classifier.predict(x_train)
x_train_accuracy=accuracy_score(x_train_prediction, y_train)
print("Accuracy score of training dataset : ",x_train_accuracy)

#accuracy score on test dataset
x_test_prediction= classifier.predict(x_test)
x_test_accuracy=accuracy_score(x_test_prediction, y_test)
print("Accuracy score of test data : ",x_test_accuracy)

"""Making a predictive system"""

input_data=(1, 1, 0, 1,	1, 3000,	0.0, 66.0,	360.0, 1.0,	2)
#converting the data into numpy array
input_data_as_numpy_array=np.asarray(input_data)
prediction=classifier.predict(input_data_as_numpy_array.reshape(1,-1))
print(prediction)

if(prediction[0]==0):
  print("Loan is not approved")
else:
  print("Loan is approved")

