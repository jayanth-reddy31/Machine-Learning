# -*- coding: utf-8 -*-
"""Movie recommendation system using cosine similarity algorithm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10dQIVznfI4lOrHACmMJnvZlwN4UP5cpB

Content Based recommendation system

popularity Based recommendation system

Collaborative Baseed recommendation system

Importing the dependencies
"""

import numpy as np
import pandas as pd
import difflib # to get the closed movie when user enter the movie name incorrect
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""Data collection and processing"""

#loading the data into pandas dataframe
movies_data = pd.read_csv('/content/movies.csv')

#printing the first five rows of the dataframe
movies_data.head()

#to print number of rows and colums
movies_data.shape

#selecting the relevent features of the dataframe

selected_features = ['genres','keywords','tagline','cast','director']
print(selected_features)

#replacing the null values with null string
for feature in selected_features:
  movies_data[feature] = movies_data[feature].fillna('')

#combining all the 5 selected 5 features

combined_features = movies_data['genres']+' '+movies_data['keywords']+' '+movies_data['tagline']+' '+movies_data['cast']+' '+movies_data['director']

combined_featues = combined_features.astype(str).fillna('')

print(combined_features)

"""Converting text data into numerical data

feature extraction
"""

vectorizer = TfidfVectorizer()

feature_vectors = vectorizer.fit_transform(combined_features)

"""Cosine similarity"""

#getting the similarity score using cosine similarity
similarity = cosine_similarity(feature_vectors)

print(similarity)
print(similarity.shape)

#getting the movie name
movie_name = input('Enter  your favrouit movie name ')

#creating a movie list names give in the dataset

list_of_title = movies_data['title'].tolist()

print(list_of_title)

#finding the close match for the movie name given by the user
find_close_match = difflib.get_close_matches(movie_name,list_of_title)
print(find_close_match)

close_match = find_close_match[0]
print(close_match)

#find index of the movie with title
index_of_the_movie = movies_data[movies_data.title ==close_match]['index'].values[0]

print(index_of_the_movie)

#getting a list of similar movies
similarity_score= list(enumerate(similarity[index_of_the_movie]))

print(similarity_score)
len(similarity_score)

#sorting the movies based on their similarity score
sorted_similar_movies = sorted(similarity_score,key = lambda x:x[1],reverse =True)
print(sorted_similar_movies)

#print the name of similar movies based on index

print('Movies suggested for you : \n')

i=1

for movies in sorted_similar_movies:
  index=movies[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if i<11:
    print(i, '.', title_from_index)
    i+=1

"""Recommandation system

"""

movie_name = input('Enter  your favrouit movie name ')

list_of_title = movies_data['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name,list_of_title)

close_match = find_close_match[0]

index_of_the_movie = movies_data[movies_data.title ==close_match]['index'].values[0]

similarity_score= list(enumerate(similarity[index_of_the_movie]))

sorted_similar_movies = sorted(similarity_score,key = lambda x:x[1],reverse =True)

print('Movies suggested for you : \n')

i=1

for movies in sorted_similar_movies:
  index=movies[0]
  title_from_index = movies_data[movies_data.index==index]['title'].values[0]
  if i<11:
    print(i, '.', title_from_index)
    i+=1