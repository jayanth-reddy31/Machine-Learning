# -*- coding: utf-8 -*-
"""Gold Price prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jfqxHOBDZN9NXnlZtMfj0ZRUt7y7Bvp1

Importing the Libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

"""Data collection and pre processing"""

#loading the dataset into pandas dataframe
gold_data = pd.read_csv('/content/gold_price_data.csv')

#printing the 1st five rows of the dataset
gold_data.head()

#printing the last five rows of dataset
gold_data.tail()

#number of rows and colums in dataset
gold_data.shape

#getting the some basic information about the data
gold_data.info()

#checking the number of missing values
gold_data.isnull().sum()

#getting the statistical measures of dataset
gold_data.describe()

# Convert 'Date' column to datetime objects from data string type#
gold_data['Date'] = pd.to_datetime(gold_data['Date'])

"""Correlation

positive correlation
negative correlation
"""

correlation = gold_data.corr()

#constructing a heat map to understand the correlation
plt.figure(figsize = (8,8))
sns.heatmap(correlation, cbar= True, square=True, annot= True, fmt='.1f', annot_kws={'size':8}, cmap='Blues')

#getting the correletion of GLD (gold)
print(correlation['GLD'])

#checking the distribution of the GLD data
sns.histplot(gold_data['GLD'], color='green')

"""Splitting the features and target"""

x = gold_data.drop(['GLD', 'Date'], axis=1)
y = gold_data['GLD']

print(x,y)

"""splitting into training and test data"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state = 2)

"""model training

Random forest
"""

regressor = RandomForestRegressor(n_estimators=100)

#training the dataset
regressor.fit(x_train, y_train)

"""Model evaluation"""

#pediction on test data
x_test_prediction = regressor.predict(x_test)

print(x_test_prediction)

#R squared value
error_score = metrics.r2_score(y_test, x_test_prediction)
print("R squared error : ",error_score)

"""comparing the actual values and predicted values in a plot"""

#converting the y_test into list
y_test = list(y_test)

plt.plot(y_test, color='blue', label='Actual Values')
plt.plot(x_test_prediction, color ='green', label ='predicted values')
plt.title('actual price vs predicted price')
plt.xlabel('number of values')
plt.ylabel('GLD price')
plt.show()

"""Making predictive system"""

input_data=(1411.630005,77.309998,15.167,1.475492)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = regressor.predict(input_data_reshaped)

print("Gold price : ",prediction)