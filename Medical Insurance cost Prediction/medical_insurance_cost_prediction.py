# -*- coding: utf-8 -*-
"""Medical Insurance cost prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1he7EnCd_uLE_Ulg5_lIn9shSQACw-o0q

Importing dependencies
"""

import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""Data collection and processing"""

#loading the data into dataframe
insurance_data = pd.read_csv('/content/insurance.csv')

#printing the first 5 rows of dataset
insurance_data.head()

#number of rows and colums
insurance_data.shape

#getting the information about the data
insurance_data.info()

"""Catogarical values

sex
smoker
region
"""

insurance_data.isnull().sum()

"""Data analysis"""

#getting some statistical measures of the dataset
insurance_data.describe()

#distribution of age value
sns.set()
plt.figure(figsize=(6,6))
sns.distplot(insurance_data['age'])
plt.title('Age distribution')
plt.show()

#distibution for gender column
plt.figure(figsize=(6,6))
sns.countplot(x='sex',data=insurance_data)
plt.title('Sex distribution')
plt.show()

insurance_data['sex'].value_counts()

#bmi distribution
plt.figure(figsize=(6,6))
sns.distplot(insurance_data['bmi'])
plt.title('BMI distribution')
plt.show()

"""Normal BMI --> 18.5 to 24.9"""

#distribution for childern column
plt.figure(figsize=(6,6))
sns.countplot(x='children',data=insurance_data)
plt.title('children column')
plt.show()

insurance_data['children'].value_counts()

#distribution for smoker column
plt.figure(figsize=(6,6))
sns.countplot(x='smoker',data=insurance_data)
plt.title('smoker distribution')
plt.show()

insurance_data['smoker'].value_counts()

#distribution for region column
plt.figure(figsize=(6,6))
sns.countplot(x='region',data=insurance_data)
plt.title('region distribution')
plt.show()

insurance_data['region'].value_counts()

#distribution plot for charges
plt.figure(figsize=(6,6))
sns.distplot(insurance_data['charges'])
plt.title('charges distribution')
plt.show()

"""Data preprocessing"""

#encoding the categorical data to numerical data
insurance_data.replace({'sex':{'male':0,'female':1}},inplace=True)
insurance_data.replace({'smoker':{'yes':0,'no':1}},inplace=True)
insurance_data.replace({'region':{'southwest':0,'southeast':1,'northwest':2,'northeast':3}},inplace=True)

insurance_data.head()

"""splitting the features and target"""

x=insurance_data.drop(columns='charges',axis=1)
y=insurance_data['charges']

print(x,y)

#splitting training and test data
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

"""Model training --> Linear regression"""

model=LinearRegression()

#training the model using training data
model.fit(x_train,y_train)

"""model evalution"""

#prediction on training data
x_train_pred = model.predict(x_train)
x_train_r2 = metrics.r2_score(y_train, x_train_pred)
print("R squared value for training data : ",x_train_r2)

#prediction on test data
x_test_pred = model.predict(x_test)
x_test_r2 = metrics.r2_score(y_test,x_test_pred)
print("R squared vallue for test data : ",x_test_r2)

"""predition model"""

input_data = (60,1,25.84,0,1,2)

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)
print("Medical Insurance cost : ",prediction)

