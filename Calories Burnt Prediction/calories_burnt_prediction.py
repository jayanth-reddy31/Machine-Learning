# -*- coding: utf-8 -*-
"""calories burnt prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JZOkSRIKZJswTTQXtoUOaFMg0IstZ_9a

Importing the dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics
import seaborn as sns

"""Data collection and processing"""

#loading the data from csv to pandas dataframe
calories = pd.read_csv('/content/calories.csv')

#print the first 5 rows of dataset
calories.head()

exercise = pd.read_csv('/content/exercise.csv')

excercise.head()

#concating two dataset
calories_data =  pd.concat([exercise, calories['Calories']], axis=1)

calories_data.head()

#checking hte number of rows and colums
calories_data.shape

#getting more information about dataset
calories_data.info()

#checking nubmer of missing values
calories_data.isnull().sum()

"""Data analysis"""

#getting some statistical data
calories_data.describe()

"""Data visualization"""

sns.set()

sns.countplot(calories_data['Gender'])
#countplot is very useful for catogorical values

#plotting distribution plot for age column
sns.distplot(calories_data['Age'])

#distribution graph for column height
sns.displot(calories_data['Height'])

#distribution graph for wieght column
sns.distplot(calories_data['Weight'])

sns.distplot(calories_data['Duration'])

"""finding the correlation between the data"""

#converting categorical data(gender) into numerical data
calories_data.replace({'Gender':{'male':1,'female':0}},inplace=True)

corr=calories_data.corr()

#constructing heatmap
plt.figure(figsize = (10,10))
sns.heatmap(corr, cbar=True,square=True, fmt ='.1f', annot=True,annot_kws={'size':8}, cmap='Blues')

"""seperating features and target"""

x = calories_data.drop(columns='Calories', axis=1)
y = calories_data['Calories']

print(x,y)

"""splitting training and test data"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=2)

print(x.shape, x_train.shape, x_test.shape)

"""Model training"""

model= XGBRegressor()

model.fit(x_train, y_train)

"""Evaluation on test data"""

#prediction on test data
x_test_prediction = model.predict(x_test)

x_test_prediction_accuracy = metrics.r2_score(y_test, x_test_prediction)

print('R squared value',x_test_prediction_accuracy)

"""Mean absolute error"""

#mean absolute error is the MEAN differnce between actual value and predicted value

mae = metrics.mean_absolute_error(y_test, x_test_prediction)
print('Mean absolute error: ',mae)

"""Predictive system"""

input_data = (14733363,1,68,190.0,94.0,29.0,105.0,40.8)

input_data_into_array = np.asarray(input_data)

input_data_reshaped = input_data_into_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)

print("The calories burnt :",prediction)

