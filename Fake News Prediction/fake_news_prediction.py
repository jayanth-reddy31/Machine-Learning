# -*- coding: utf-8 -*-
"""Fake news prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IhsQILXcBeed6nxkE4Xpy8tXDNDYqY0J

# **About the dataset**

id: unique id for a news article

title: the title of a news article

author: author of the news article

text: the text of the article; could be incomplete

label: a label that marks the article as potentially unreliable

1: Fake News

0: Real News

Importing the dependencies
"""

import numpy as np
import pandas as pd
import re #used to search text in the document
from nltk.corpus import stopwords #nltk : natural language tool kit ; corpus : referes to the collection of written texts
from nltk.stem.porter import PorterStemmer #to reduce the word into root word(original form)
from sklearn.feature_extraction.text import TfidfVectorizer #to convert the text to numbers so that algorithm/computer can understand
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download("stopwords")

#printing the stop words in english
print(stopwords.words('english'))

"""Data pre-preprocessing"""

#loading the dataset to pandas dataframe
news_dataset=pd.read_csv('/content/train.csv')

#printing number of rows and columns of dataset
news_dataset.shape

#printing the first 5 instances of dataset
news_dataset.head()

#counting the number of missing values
news_dataset.isnull().sum()

#replacing null values with empty string
news_dataset=news_dataset.fillna('')

#merging the author name and title name
news_dataset['content'] = news_dataset['author']+ '  ' +news_dataset['title']

print(news_dataset['content'])

#seperating data columns and label
x=news_dataset.drop(columns='label',axis=1)
y=news_dataset['label']

print(x)
print(y)

"""Stemming"""

port_stemmer = PorterStemmer()

def stemming(content):
  stemmed_content = re.sub('[^a-zA-Z]',' ',content)  #^a-zA-Z : exludes which doesn't fit in the set a-z and A-Z, and only retains the alphabet characters (removing all special characters and number from content column)
                                                    #any special characters and numbers are replaced by space
  stemmed_content = stemmed_content.lower() #converting all text into lower case
  stemmed_content = stemmed_content.split() #takes the string and splits it into a list of words eg: " hello world" : ["hello", "world"]
  stemmed_content = [port_stemmer.stem(word) for word in stemmed_content if not word in stopwords.words('english')] #while stemming process this also exclude stop words without considering them, hence stemming_dataset contains data without stopwords
  stemmed_content = ' '.join(stemmed_content) #takes the each word in the list and concatenates them to a single string with space between them eg: ["hello", "world0"] --> "hello"
  return stemmed_content

news_dataset['content'] = news_dataset['content'].apply(stemming) #applies the stemming function to the content column and saves in content column in new_dataset

print(news_dataset['content'])

#seperating x data and y data labels
x=news_dataset['content'].values
y=news_dataset['label'].values

print(x)
print(y)

#converting textual data into numerical data
vectorizer = TfidfVectorizer()
vectorizer.fit(x)
x=vectorizer.transform(x)

print(x)

"""Creating training and test data"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, stratify=y, random_state=2)

"""Training the model : Logistic regression model"""

model = LogisticRegression()

model.fit(x_train, y_train)

"""Evalutation --> accuracy_score"""

#accuracy score on the training data
x_train_prediction = model.predict(x_train)
x_train_accuracy = accuracy_score(x_train_prediction, y_train)

print("Accuracy score of the training data : ",x_train_accuracy)

#accuracy scoreon the test data
x_test_prediction = model.predict(x_test)
x_test_accuracy = accuracy_score(x_test_prediction, y_test)

print("Accuracy score of the test data : ",x_test_accuracy)

"""Making a predictive system"""

input_data = x_test[0]
prediction = model.predict(input_data)
print(prediction)

if(prediction[0] == 0):
  print("The news is real")
else:
  print("The news is fake")