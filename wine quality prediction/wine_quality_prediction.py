# -*- coding: utf-8 -*-
"""Wine Quality Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13DORVjz4G6Gk7DRoIqFz2jkqe2g-LUpC

Import Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

"""Data Collection"""

#loading dataset into dataframes
wine_dataset=pd.read_csv("/content/winequality-red.csv")

#nubmer of rows and columns in the dataset
wine_dataset.shape

#sample of the dataset
wine_dataset.head()

#checking the missing values
wine_dataset.isnull().sum()

"""Data analysis and visualization"""

#getting the statistical measures of the dataset
wine_dataset.describe()

#nubmer of values for each quality
sns.catplot(x='quality', data=wine_dataset, kind='count')

#volatile acidity vs wine quality
plot=plt.figure(figsize=(5,5))
sns.barplot(x='quality', y='volatile acidity', data=wine_dataset)
#therefore both are inversly proportional

#citric acid vs quality
plot=plt.figure(figsize=(5,5))
sns.barplot(x='quality', y='citric acid', data=wine_dataset)

"""Correlation

positive correlation
negative correlation
"""

correlation = wine_dataset.corr()

plot=plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

"""Data preprocessing

"""

#seperate data and label
x=wine_dataset.drop('quality', axis=1)

print(x)

#label binarization
y=wine_dataset['quality'].apply(lambda y_value:1 if y_value>=7 else 0)

"""Train and test split"""

#splitting dataset
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=3)

#checking the size the split data
print(x.shape, x_train.shape, x_test.shape)

"""Model classifier

RANDOM CLASSIFIER MODEL
"""

model=RandomForestClassifier()

#training the model
model.fit(x_train,y_train)

"""Evaluation"""

#accuracy score on training data
x_train_prediction=model.predict(x_train)
x_train_prediction_accuracy=accuracy_score(x_train_prediction, y_train)
print("Accuracy on training datset : ",x_train_prediction_accuracy)

#accuracy score on test data
x_test_prediction=model.predict(x_test)
x_test_prediction_accuracy=accuracy_score(x_test_prediction, y_test)
print("Accuracy on test datset : ",x_test_prediction_accuracy)

"""Predictive system"""

input_data=(7.3,0.65,0.0,1.2,0.065,15.0,21.0,0.9946,3.39,0.47,10.0)
#input_data to numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshaping the data since we are predicting for only one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0]==1):
  print("good Quality wine")
else:
  print("bad quality wine")