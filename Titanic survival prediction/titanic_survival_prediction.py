# -*- coding: utf-8 -*-
"""Titanic Survival prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_19Jo8JkhNVw4Coe6dWIW0PSNqyrNvDw

Impporting Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and procssing"""

#load the data into pandas dataframe
titanic_data = pd.read_csv('/content/titanic data.csv')

#printing first 5 rows of the dataset
titanic_data.head()

#to check number of rows and columns
titanic_data.shape

#printing some more information of the data
titanic_data.info()

#check the number of missing values in dataset
titanic_data.isnull().sum()

"""Handling the missing values"""

#drop the cabin column
titanic_data = titanic_data.drop(columns='Cabin', axis =1)

#repalcing the missing values in age column with mean value
titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace=True)

titanic_data['Embarked'].value_counts()

#finding the mode value of embarked column
print(titanic_data['Embarked'].mode())

print(titanic_data['Embarked'].mode()[0])

#replecing mode value for embarked column
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace = True)

titanic_data.isnull().sum()

#getting some statistical measures about the data
titanic_data.describe()

#finding number of people survived and not survived
titanic_data['Survived'].value_counts()

"""Data visualization"""

#making a count plot for "survied" column
sns.set()

sns.countplot(x='Survived',data=titanic_data)

#making a countplot for sex column
sns.countplot(x='Sex', data=titanic_data)

#nubmer of survivors gender wise
sns.countplot(x='Sex', hue='Survived', data=titanic_data)

#making countplot for pclass
sns.countplot(x='Pclass', data=titanic_data)

sns.countplot(x="Pclass", hue='Survived', data=titanic_data)

"""Encoding the categorical column"""

titanic_data['Embarked'].value_counts()

titanic_data.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}},inplace=True)

titanic_data.head()

"""Seperating target and features"""

x= titanic_data.drop(columns=['PassengerId','Ticket','Name','Survived'], axis =1)
y= titanic_data['Survived']

print(x,y)

"""splitting the data into train and test data"""

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=2)

print(x.shape, x_train.shape, x_test.shape)

"""Model training

Logistic regression
"""

model = LogisticRegression()

#training the logistic regression with training dataset
model.fit(x_train, y_train)

"""Model evalutation

Accuracy score
"""

#accuracy on training dataset
x_train_prediction = model.predict(x_train)
x_train_accuracy = accuracy_score(y_train, x_train_prediction)
print("Accuracy on training data : ", x_train_accuracy)

print(x_train_prediction)

#accuracy on test dataset
x_test_prediction = model.predict(x_test)
x_test_accuracy = accuracy_score(y_test, x_test_prediction)
print("Accuracy on test data : ", x_test_accuracy)

print(x_test_prediction)

"""Predictive system"""

input_data=(3,0,22.000000,1,0,7.2500,0)
input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped= input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if(prediction[0] == 1):
  print("The person is survived")
else:
  print("The person is not survived")

